#!/usr/bin/env python

import sys, re


class __ReadState:
    def __init__(self):
        self.skip_objediting   = True
        self.include_file_path = False


VERSION = "0.9.5"


def show_help():
    print "-h".ljust(3, " ") + "display this help message."
    print "-v".ljust(3, " ") + "display the version number."
    print "-a".ljust(3, " ") + "display information about this tool."
    print "-o".ljust(3, " ") + "include methods from objediting/ and objeditingpresets/ ."
    print "-p".ljust(3, " ") + "include the file path for the methods in question."
    print " "
    print "Example usage:"
    print "  $ ./wurst saveReal"
    print "  Table.saveReal( int parentKey, real value )"
    print "  hashtable.saveReal( integer parentKey, integer childKey, real value )"
    print " "
    exit(0)


def show_version():
    print "Wurst function search bot version " + VERSION
    exit(0)


def show_about():
    print "Wurst function search bot is a public project on " + \
          "https://github.com/Cokemonkey11/bot-wurst ."
    exit(0)


def show_unknown_arg(char):
    print "Unrecognized argument " + char
    exit(0)


def include_object_editing_methods(read_state):
    read_state.skip_objediting = False


def include_file_path(read_staet):
    read_state.include_file_path = True


def parse_arg(arg, read_state):
    if arg[0] == '-':
        for char in arg[1:]:
            if char == 'h':
                show_help()
            elif char == 'v':
                show_version()
            elif char == 'a':
                show_about()
            elif char == 'o':
                include_object_editing_methods(read_state)
            elif char == 'p':
                include_file_path(read_state)
            else:
                show_unknown_arg(char)
    else:
        return arg

    return None


if __name__ == "__main__":
    search_args = []

    if len(sys.argv) < 2:
        show_help()

    read_state = __ReadState()

    for arg in sys.argv[1:]:
        arg_result = parse_arg(arg, read_state)
        if arg_result:
            search_args.append(arg_result)

    if not len(search_args):
        print "No search argument provided. Use `./wurst -h` for help."
        exit(0)

    with open("stl.txt", 'r') as f:
        lines = [line.strip() for line in f.readlines()]
        for line in lines:
            if " ".join(search_args).lower() in line.lower():
                if read_state.skip_objediting and re.match(r'objediting', line):
                    continue

                if not read_state.include_file_path:
                    line = line.split('.wurst: ')[-1]

                print line
